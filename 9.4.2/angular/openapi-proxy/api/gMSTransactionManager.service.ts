/**
 * GroupManagementSystem API
 *
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CombinedTransactionDtoPagedResultDto } from '../model/combinedTransactionDtoPagedResultDto';
// @ts-ignore
import { GMSTransactionResponseDTO } from '../model/gMSTransactionResponseDTO';
// @ts-ignore
import { MemberType } from '../model/memberType';
// @ts-ignore
import { TransactionResponseDTO } from '../model/transactionResponseDTO';
// @ts-ignore
import { TransactionType } from '../model/transactionType';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class GMSTransactionManagerProxy extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param paymentStructureId 
     * @param transactionResponseDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiServicesAppGMSTransactionManagerAddCollectionPost(paymentStructureId?: number, transactionResponseDTO?: TransactionResponseDTO, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<GMSTransactionResponseDTO>;
    public apiServicesAppGMSTransactionManagerAddCollectionPost(paymentStructureId?: number, transactionResponseDTO?: TransactionResponseDTO, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GMSTransactionResponseDTO>>;
    public apiServicesAppGMSTransactionManagerAddCollectionPost(paymentStructureId?: number, transactionResponseDTO?: TransactionResponseDTO, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GMSTransactionResponseDTO>>;
    public apiServicesAppGMSTransactionManagerAddCollectionPost(paymentStructureId?: number, transactionResponseDTO?: TransactionResponseDTO, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>paymentStructureId, 'paymentStructureId');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/services/app/GMSTransactionManager/AddCollection`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GMSTransactionResponseDTO>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: transactionResponseDTO,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param pageNumber 
     * @param pageSize 
     * @param refNo 
     * @param fromDate 
     * @param toDate 
     * @param paymentStructureId 
     * @param memberType 
     * @param transactionType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiServicesAppGMSTransactionManagerGetCollectionTransactionsGet(pageNumber?: number, pageSize?: number, refNo?: string, fromDate?: string, toDate?: string, paymentStructureId?: number, memberType?: MemberType, transactionType?: TransactionType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<CombinedTransactionDtoPagedResultDto>;
    public apiServicesAppGMSTransactionManagerGetCollectionTransactionsGet(pageNumber?: number, pageSize?: number, refNo?: string, fromDate?: string, toDate?: string, paymentStructureId?: number, memberType?: MemberType, transactionType?: TransactionType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CombinedTransactionDtoPagedResultDto>>;
    public apiServicesAppGMSTransactionManagerGetCollectionTransactionsGet(pageNumber?: number, pageSize?: number, refNo?: string, fromDate?: string, toDate?: string, paymentStructureId?: number, memberType?: MemberType, transactionType?: TransactionType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CombinedTransactionDtoPagedResultDto>>;
    public apiServicesAppGMSTransactionManagerGetCollectionTransactionsGet(pageNumber?: number, pageSize?: number, refNo?: string, fromDate?: string, toDate?: string, paymentStructureId?: number, memberType?: MemberType, transactionType?: TransactionType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageNumber, 'PageNumber');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'PageSize');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>refNo, 'RefNo');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fromDate, 'FromDate');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>toDate, 'ToDate');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>paymentStructureId, 'PaymentStructureId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>memberType, 'MemberType');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>transactionType, 'TransactionType');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/services/app/GMSTransactionManager/GetCollectionTransactions`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<CombinedTransactionDtoPagedResultDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
